{"version":3,"sources":["chat.js","App.js","index.js"],"names":["client","ApiAiClient","accessToken","sendMessage","text","type","payload","sender","arguments","length","undefined","initState","store","createStore","state","action","Object","toConsumableArray","concat","applyMiddleware","next","textRequest","then","response","fulfillment","result","speech","App","_this$props","this","props","feed","react_default","a","createElement","map","entry","onKeyDown","e","keyCode","target","value","Component","connect","ReactDOM","render","es","src_App","document","getElementById"],"mappings":"2OAIMA,EAAS,IAAIC,IAAY,CAACC,YADZ,qCAKPC,EAAc,SAACC,GAAD,MAA0B,CACjDC,KAHe,aAIfC,QAAS,CAACF,OAAMG,OAFOC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAc,UAsBnCG,EAAY,CAAC,CAAEP,KAAM,QAadQ,EAAQC,YAXE,WAA+B,IAA9BC,EAA8BN,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAtBG,EAAWI,EAAWP,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAClD,OAAQK,EAAOV,MAEX,IA7BW,aA8BP,OAAOW,OAAAC,EAAA,EAAAD,CAAIF,GAAXI,OAAA,CAAkBH,EAAOT,UAE7B,QACA,OAAOQ,IAIkCK,YA7BvB,kBAAM,SAAAC,GAAI,OAAI,SAAAL,GAGpC,GAFAK,EAAKL,GATU,eAWZA,EAAOV,KAAqB,KACnBD,EAASW,EAAOT,QAAhBF,KAERJ,EAAOqB,YAAYjB,GAClBkB,KAED,SAAmBC,GAAU,IACTC,EAAgBD,EAAzBE,OAASD,YAChBJ,EAAKjB,EAAYqB,EAAYE,OAAQ,gBCrB3CC,mLACK,IAAAC,EACqBC,KAAKC,MAA1BC,EADAH,EACAG,KAAM5B,EADNyB,EACMzB,YACb,OACE6B,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAAA,UACEH,EAAKI,IAAK,SAAAC,GAAK,OAAIJ,EAAAC,EAAAC,cAAA,UAAKE,EAAMhC,SAEhC4B,EAAAC,EAAAC,cAAA,SAAO7B,KAAK,OAAOgC,UAAY,SAACC,GAAD,OAAqB,KAAdA,EAAEC,QAAiBpC,EAAYmC,EAAEE,OAAOC,OAAS,gBAT3EC,aAmBHC,cAJS,SAAA7B,GAAK,MAAK,CAChCiB,KAAMjB,IAGgC,CAACX,eAA1BwC,CAAwChB,SCbvDiB,IAASC,OACTb,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAUlC,MAASA,GACnBoB,EAAAC,EAAAC,cAACa,EAAD,OAEAC,SAASC,eAAe","file":"static/js/main.dab0e737.chunk.js","sourcesContent":["import {ApiAiClient} from 'api-ai-javascript';\nimport { applyMiddleware,createStore } from 'redux';\n\nconst accessToken = '0a687f42dd984521a304d63538109cbd';\nconst client = new ApiAiClient({accessToken})\n\nconst ON_MESSAGE = 'ON_MESSAGE';\n\nexport const sendMessage = (text, sender='user') => ({\n    type: ON_MESSAGE, \n    payload: {text, sender }\n    \n});\n\nconst messageMiddleware = () => next => action => {\n    next(action);\n\n    if(action.type === ON_MESSAGE) {\n        const { text } = action.payload;\n\n        client.textRequest(text)\n        .then( onSuccess )\n\n        function onSuccess(response) {\n            const {result: {fulfillment}} = response;\n            next(sendMessage(fulfillment.speech, 'bot'));\n        }\n    }\n};\n\nconst initState = [{ text: 'hey' }];\n\nconst messageReducer = (state = initState, action) => {\n    switch (action.type) {\n        \n        case ON_MESSAGE:\n            return [...state, action.payload];\n\n        default: \n        return state;\n    }\n};\n\nexport const store = createStore(messageReducer, applyMiddleware(messageMiddleware));","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { sendMessage } from './chat';\n\nclass App extends Component {\n  render() {\n    const {feed, sendMessage} = this.props;\n    return (\n      <div>\n      <h1>Hello Bot Helen!</h1>\n      <ul>\n      { feed.map( entry => <li>{entry.text}</li>)}\n      </ul>\n      <input type=\"text\" onKeyDown={ (e) => e.keyCode === 13 ? sendMessage(e.target.value) : null }></input>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  feed: state\n});\n\nexport default connect(mapStateToProps, {sendMessage})(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {Provider} from 'react-redux';\nimport {store} from './chat';\nimport 'milligram';\n\n\n\n\nReactDOM.render(\n<Provider store = {store} >\n<App />\n</Provider>,\ndocument.getElementById('root'));\n\n"],"sourceRoot":""}